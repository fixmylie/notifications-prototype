{"version":3,"sources":["src/message-bus/shared-worker.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;IAEA;;AACA,IAAM,MAAM,GAAI,IAAhB;;IAEM;AAGJ,iBAAA;AAAA;;AACE,SAAK,KAAL,GAAa,IAAI,GAAJ,EAAb;AACD;;;;4BAEc,MAAiB;AAC9B,WAAK,KAAL,CAAW,GAAX,CAAe,IAAf;AACD;;;+BAEiB,MAAiB;AACjC,UAAI;AACF,QAAA,IAAI,CAAC,KAAL;AACD,OAFD,SAEU;AACR,aAAK,KAAL,CAAW,MAAX,CAAkB,IAAlB;AACD;AACF;;;2BAEa,QAA6D;AAAA,UAAvC,OAAuC,uEAAF,EAAE;AACzE,WAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAS;AAC1B,YAAI,IAAI,KAAK,OAAO,CAAC,OAArB,EAA8B;AAC5B,UAAA,IAAI,CAAC,WAAL,CAAiB,MAAjB;AACD;AACF,OAJD;AAKD;;;;;;AAGH,IAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AAEA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,UAAC,CAAD,EAAM;AAAA,gCACxB,CAAC,CAAC,KADsB;AAAA,MAChC,IADgC;;AAGvC,EAAA,GAAG,CAAC,OAAJ,CAAY,IAAZ;AAEA,EAAA,IAAI,CAAC,gBAAL,CAAsB,SAAtB,EAAiC,UAAC,KAAD,EAAmC;;;AAClE,QAAM,KAAK,GAAG,KAAK,CAAC,IAApB;;AAEA,QAAI,KAAK,CAAC,OAAN,KAAkB,iBAAtB,EAAyC;AACvC,UAAM,YAAY,GAAG,KAAK,CAAC,OAA3B;AAEA,UAAM,OAAO,GAAG;AACd,QAAA,OAAO,EAAE,YAAY,CAAC,OADR;AAEd,QAAA,KAAK,EAAE,YAAY,CAAC,KAFN;AAGd,QAAA,OAAO,EAAE,YAAY,CAAC;AAHR,OAAhB;AAMA,UAAM,MAAM,GAAG;AACb,QAAA,IAAI,EAAA,CAAA,EAAA,GAAE,YAAY,CAAC,IAAf,MAAmB,IAAnB,IAAmB,EAAA,KAAA,KAAA,CAAnB,GAAmB,EAAnB,GAAuB;AADd,OAAf;AAIA,MAAA,GAAG,CAAC,MAAJ,CACE;AAAE,QAAA,IAAI,EAAE,SAAR;AAAmB,QAAA,OAAO,EAAE,OAA5B;AAAqC,QAAA,IAAI,EAAE;AAA3C,OADF,EAEE;AAAE,QAAA,OAAO,EAAE,MAAM,CAAC,IAAP,KAAgB,KAAhB,GAAwB,IAAxB,GAA+B;AAA1C,OAFF;AAKA;AACD;;AAED,QAAI,KAAK,CAAC,OAAN,KAAkB,OAAtB,EAA+B;AAC7B,MAAA,GAAG,CAAC,UAAJ,CAAe,IAAf;AACD;AACF,GA3BD;AA6BA,EAAA,IAAI,CAAC,KAAL;AACD,CAnCD","file":"shared-worker.580e7eeb.js","sourceRoot":"..","sourcesContent":["import type { WorkerInputMessageEvent, WorkerOutput } from './types';\n\n// eslint-disable-next-line no-restricted-globals\nconst worker = (self as unknown) as SharedWorkerGlobalScope;\n\nclass Hub {\n  private ports: Set<MessagePort>;\n\n  constructor() {\n    this.ports = new Set();\n  }\n\n  public connect(port: MessagePort): void {\n    this.ports.add(port);\n  }\n\n  public disconnect(port: MessagePort): void {\n    try {\n      port.close();\n    } finally {\n      this.ports.delete(port);\n    }\n  }\n\n  public notify(output: WorkerOutput, options: { exclude?: MessagePort } = {}) {\n    this.ports.forEach((port) => {\n      if (port !== options.exclude) {\n        port.postMessage(output);\n      }\n    });\n  }\n}\n\nconst hub = new Hub();\n\nworker.addEventListener('connect', (e) => {\n  const [port] = e.ports;\n\n  hub.connect(port);\n\n  port.addEventListener('message', (event: WorkerInputMessageEvent) => {\n    const input = event.data;\n\n    if (input.command === 'process-message') {\n      const inputMessage = input.payload;\n\n      const message = {\n        channel: inputMessage.channel,\n        topic: inputMessage.topic,\n        payload: inputMessage.payload,\n      };\n\n      const params = {\n        self: inputMessage.self ?? false,\n      };\n\n      hub.notify(\n        { type: 'message', payload: message, meta: params },\n        { exclude: params.self === false ? port : undefined },\n      );\n\n      return;\n    }\n\n    if (input.command === 'close') {\n      hub.disconnect(port);\n    }\n  });\n\n  port.start();\n});\n"]}